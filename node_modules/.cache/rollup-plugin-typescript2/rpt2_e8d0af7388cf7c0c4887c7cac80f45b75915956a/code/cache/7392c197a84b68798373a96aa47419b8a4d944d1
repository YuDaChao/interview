{"code":"\"use strict\";\r\nvar STATUS;\r\n(function (STATUS) {\r\n    STATUS[STATUS[\"pending\"] = 0] = \"pending\";\r\n    STATUS[STATUS[\"fulfilled\"] = 1] = \"fulfilled\";\r\n    STATUS[STATUS[\"rejected\"] = 2] = \"rejected\";\r\n})(STATUS || (STATUS = {}));\r\nvar MyPromise = /** @class */ (function () {\r\n    function MyPromise(exector) {\r\n        var _this = this;\r\n        this.value = null;\r\n        this.reason = null;\r\n        this.status = STATUS.pending;\r\n        this.onFulfilledCallbacks = [];\r\n        this.onRejectCallbacks = [];\r\n        this.resolve = function (value) {\r\n            if (_this.status === STATUS.pending) {\r\n                _this.value = value;\r\n                _this.status = STATUS.fulfilled;\r\n                _this.onFulfilledCallbacks.forEach(function (onFulfilled) { return onFulfilled(_this.value); });\r\n            }\r\n        };\r\n        this.reject = function (reason) {\r\n            if (_this.status === STATUS.pending) {\r\n                _this.reason = reason;\r\n                _this.status = STATUS.rejected;\r\n                _this.onRejectCallbacks.forEach(function (onReject) { return onReject(_this.reason); });\r\n            }\r\n        };\r\n        this.resolvePromise = function (promise2, x, resolve, reject) {\r\n            if (x === promise2) {\r\n                return reject(new TypeError('不能返回相同的引用'));\r\n            }\r\n            if (x instanceof MyPromise) {\r\n                x.then(resolve, reject);\r\n            }\r\n            else if ((typeof x === 'object' && x !== null) || typeof x === 'function') {\r\n                var called_1 = false;\r\n                try {\r\n                    var then = x.then;\r\n                    if (typeof then === 'function') {\r\n                        then.call(x, function (y) {\r\n                            if (called_1) {\r\n                                return;\r\n                            }\r\n                            called_1 = true;\r\n                            _this.resolvePromise(promise2, y, resolve, reject);\r\n                        }, function (r) {\r\n                            if (called_1) {\r\n                                return;\r\n                            }\r\n                            called_1 = true;\r\n                            reject(r);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (called_1) {\r\n                            return;\r\n                        }\r\n                        called_1 = true;\r\n                        resolve(x);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (called_1) {\r\n                        return;\r\n                    }\r\n                    called_1 = true;\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                resolve(x);\r\n            }\r\n        };\r\n        exector(this.resolve, this.reject);\r\n    }\r\n    MyPromise.prototype.then = function (onFulfilled, onReject) {\r\n        var _this = this;\r\n        onFulfilled = onFulfilled && typeof onFulfilled === 'function' ? onFulfilled : function (value) { return value; };\r\n        onReject = onReject && typeof onReject === 'function' ? onReject : function (reason) { return reason; };\r\n        var promise2 = new MyPromise(function (resolve, reject) {\r\n            try {\r\n                if (_this.status === STATUS.fulfilled) {\r\n                    setTimeout(function () {\r\n                        var x = onFulfilled === null || onFulfilled === void 0 ? void 0 : onFulfilled(_this.value);\r\n                        _this.resolvePromise(promise2, x, resolve, reject);\r\n                    });\r\n                }\r\n                if (_this.status === STATUS.rejected) {\r\n                    setTimeout(function () {\r\n                        var x = onReject === null || onReject === void 0 ? void 0 : onReject(_this.reason);\r\n                        _this.resolvePromise(promise2, x, resolve, reject);\r\n                    });\r\n                }\r\n                if (_this.status == STATUS.pending) {\r\n                    _this.onFulfilledCallbacks.push(function () {\r\n                        setTimeout(function () {\r\n                            try {\r\n                                var x = onFulfilled === null || onFulfilled === void 0 ? void 0 : onFulfilled(_this.value);\r\n                                _this.resolvePromise(promise2, x, resolve, reject);\r\n                            }\r\n                            catch (e) {\r\n                                reject(e);\r\n                            }\r\n                        });\r\n                    });\r\n                    _this.onRejectCallbacks.push(function () {\r\n                        setTimeout(function () {\r\n                            try {\r\n                                var x = onReject === null || onReject === void 0 ? void 0 : onReject(_this.reason);\r\n                                _this.resolvePromise(promise2, x, resolve, reject);\r\n                            }\r\n                            catch (e) {\r\n                                reject(e);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n        return promise2;\r\n    };\r\n    return MyPromise;\r\n}());\r\nvar p = new MyPromise(function (resolve, reject) {\r\n    setTimeout(function () {\r\n        resolve(1);\r\n    });\r\n}).then(function (value) {\r\n    console.log('ok: ', value);\r\n    return new MyPromise(function (resolve) {\r\n        resolve('哈哈哈');\r\n    });\r\n}, function (reason) {\r\n    console.log('error: ', reason);\r\n    return reason + \" --- fail\";\r\n});\r\np.then(function (value) {\r\n    console.log('ok 2: ', value);\r\n}, function (reason) {\r\n    console.log('error 2: ', reason);\r\n});\r\nMyPromise.deferred = function () {\r\n    var dfd = {};\r\n    dfd.promise = new MyPromise(function (resolve, reject) {\r\n        dfd.resolve = resolve;\r\n        dfd.reject = reject;\r\n    });\r\n    return dfd;\r\n};\r\n","references":[]}
